// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  name       String  @unique
  email      String  @unique
  phone      String? @default("")
  password   String
  avatarPath String  @default("uploads/default-avatar.png") @map("avatar_path")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ordes     Order[]
  reviews   Review[]
  favorites Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String
  price       Int
  images      String[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  orderItems OrderItem[]
  reviews    Review[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("category_id")

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  slug String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  products Product[]
}

model Review {
  id     Int    @id @default(autoincrement())
  rating Int
  text   String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
}

model Order {
  id     Int             @id @default(autoincrement())
  status EnumOrderStatus @default(PENDING)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  items OrderItem[]

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}

model OrderItem {
  id Int @id @default(autoincrement())

  quantity Int
  price    Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product   Product? @relation(fields: [productId], references: [id])
  productId Int?     @map("product_id")

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?   @map("order_id")
}
